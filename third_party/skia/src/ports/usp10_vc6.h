

#define CLEARTYPE_QUALITY 5

typedef struct tagWCRANGE
{
    WCHAR  wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, FAR *LPWCRANGE;

typedef struct tagGLYPHSET
{
    DWORD    cbThis;
    DWORD    flAccel;
    DWORD    cGlyphsSupported;
    DWORD    cRanges;
    WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET, FAR *LPGLYPHSET;

typedef struct tag_SCRIPT_CONTROL {
    DWORD   uDefaultLanguage : 16; // For NADS, also default for context
    DWORD   fContextDigits : 1;  // Means use previous script instead of uDefaultLanguage

                                 // The following flags provide legacy support for GetCharacterPlacement features
    DWORD   fInvertPreBoundDir : 1;  // Reading order of virtual item immediately prior to string
    DWORD   fInvertPostBoundDir : 1;  // Reading order of virtual item immediately following string
    DWORD   fLinkStringBefore : 1;  // Equivalent to presence of ZWJ before string
    DWORD   fLinkStringAfter : 1;  // Equivalent to presence of ZWJ after string
    DWORD   fNeutralOverride : 1;  // Causes all neutrals to be strong in the current embedding direction
    DWORD   fNumericOverride : 1;  // Causes all numerals to be strong in the current embedding direction
    DWORD   fLegacyBidiClass : 1;  // Causes plus and minus to be reated as neutrals, slash as a common separator
    DWORD   fMergeNeutralItems : 1;  // Causes merging neutral characters into strong items, when possible
    DWORD   fUseStandardBidi : 1;  // Causes matching pair algorithm to be skipped
    DWORD   fReserved : 6;
} SCRIPT_CONTROL;

typedef struct tag_SCRIPT_STATE {
    WORD    uBidiLevel : 5;  // Unicode Bidi algorithm embedding level (0-16)
    WORD    fOverrideDirection : 1;  // Set when in LRO/RLO embedding
    WORD    fInhibitSymSwap : 1;  // Set by U+206A (ISS), cleared by U+206B (ASS)
    WORD    fCharShape : 1;  // Set by U+206D (AAFS), cleared by U+206C (IAFS)
    WORD    fDigitSubstitute : 1;  // Set by U+206E (NADS), cleared by U+206F (NODS)
    WORD    fInhibitLigate : 1;  // Equiv !GCP_Ligate, no Unicode control chars yet
    WORD    fDisplayZWG : 1;  // Equiv GCP_DisplayZWG, no Unicode control characters yet
    WORD    fArabicNumContext : 1;  // For EN->AN Unicode rule
    WORD    fGcpClusters : 1;  // For Generating Backward Compatible GCP Clusters (legacy Apps)
    WORD    fReserved : 1;
    WORD    fEngineReserved : 2;  // For use by shaping engine
} SCRIPT_STATE;

typedef struct tag_SCRIPT_ANALYSIS {
    WORD    eScript : 10;    // Shaping engine
    WORD    fRTL : 1;     // Rendering direction
    WORD    fLayoutRTL : 1;     // Set for GCP classes ARABIC/HEBREW and LOCALNUMBER
    WORD    fLinkBefore : 1;     // Implies there was a ZWJ before this item
    WORD    fLinkAfter : 1;     // Implies there is a ZWJ following this item.
    WORD    fLogicalOrder : 1;     // Set by client as input to ScriptShape/Place
    WORD    fNoGlyphIndex : 1;     // Generated by ScriptShape/Place - this item does not use glyph indices
    SCRIPT_STATE s;
} SCRIPT_ANALYSIS;

typedef struct tag_SCRIPT_ITEM {
    int              iCharPos;      // Logical offset to first character in this item
    SCRIPT_ANALYSIS  a;
} SCRIPT_ITEM;

typedef struct tag_SCRIPT_VISATTR {
    WORD           uJustification : 4;  // Justification class
    WORD           fClusterStart : 1;  // First glyph of representation of cluster
    WORD           fDiacritic : 1;  // Diacritic
    WORD           fZeroWidth : 1;  // Blank, ZWJ, ZWNJ etc, with no width
    WORD           fReserved : 1;  // General reserved
    WORD           fShapeReserved : 8;  // Reserved for use by shaping engines
} SCRIPT_VISATTR;

typedef void *SCRIPT_CACHE;

#define GGI_MARK_NONEXISTING_GLYPHS 0X0001
#define SPI_GETFONTSMOOTHINGCONTRAST 0x200C
#define GGO_UNHINTED 0x0100

BOOL RemoveFontMemResourceEx(HANDLE h)
{
    typedef BOOL(WINAPI *LPFN_RemoveFontMemResourceEx)(HANDLE);
    static LPFN_RemoveFontMemResourceEx fnRemoveFontMemResourceEx = (LPFN_RemoveFontMemResourceEx)GetProcAddress(GetModuleHandle(_T("Gdi32")), "RemoveFontMemResourceEx");
    return fnRemoveFontMemResourceEx(h);
}

DWORD WINAPI GetFontUnicodeRanges(HDC hdc, LPGLYPHSET lpgs)
{
    typedef DWORD(WINAPI *LPFN_GetFontUnicodeRanges)(HDC, LPGLYPHSET);
    static LPFN_GetFontUnicodeRanges fnGetFontUnicodeRanges = (LPFN_GetFontUnicodeRanges)GetProcAddress(GetModuleHandle(_T("Gdi32")), "GetFontUnicodeRanges");
    return fnGetFontUnicodeRanges(hdc, lpgs);
}

DWORD WINAPI GetGlyphIndicesW(HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl)
{
    typedef DWORD(WINAPI *LPFN_GetGlyphIndicesW)(HDC, LPCWSTR, int, LPWORD, DWORD);
    static LPFN_GetGlyphIndicesW fnGetGlyphIndicesW = (LPFN_GetGlyphIndicesW)GetProcAddress(GetModuleHandle(_T("Gdi32")), "GetGlyphIndicesW");
    return fnGetGlyphIndicesW(hdc, lpstr, c, pgi, fl);
}

HRESULT WINAPI ScriptFreeCache(SCRIPT_CACHE *psc)
{
    typedef HRESULT(WINAPI *LPFN_ScriptFreeCache)(SCRIPT_CACHE*);
    static LPFN_ScriptFreeCache fnScriptFreeCache = (LPFN_ScriptFreeCache)GetProcAddress(GetModuleHandle(_T("Usp10.dll")), "ScriptFreeCache");
    return fnScriptFreeCache(psc);
}

HRESULT WINAPI ScriptItemize(
    const WCHAR * pwcInChars,
    int cInChars,
    int cMaxItems,
    const SCRIPT_CONTROL* psControl,
    const SCRIPT_STATE* psState,
    SCRIPT_ITEM * pItems,
    int* pcItems)
{
    typedef HRESULT(WINAPI *LPFN_ScriptItemize)(const WCHAR*, int , int , const SCRIPT_CONTROL* , const SCRIPT_STATE* , SCRIPT_ITEM* , int* );
    static LPFN_ScriptItemize fnScriptItemize = (LPFN_ScriptItemize)GetProcAddress(GetModuleHandle(_T("Usp10.dll")), "ScriptItemize");
    return fnScriptItemize(pwcInChars, cInChars, cMaxItems, psControl, psState, pItems, pcItems);
}

HRESULT WINAPI ScriptShape(
    HDC hdc,
    SCRIPT_CACHE* psc,
    const WCHAR* pwcChars,
    int cChars,
    int cMaxGlyphs,
    SCRIPT_ANALYSIS *psa,
    WORD* pwOutGlyphs,
    WORD* pwLogClust,
    SCRIPT_VISATTR* psva,
    int* pcGlyphs)
{
    typedef HRESULT(WINAPI *LPFN_ScriptShape)(HDC hdc,
        SCRIPT_CACHE* psc,
        const WCHAR* pwcChars,
        int cChars,
        int cMaxGlyphs,
        SCRIPT_ANALYSIS *psa,
        WORD* pwOutGlyphs,
        WORD* pwLogClust,
        SCRIPT_VISATTR* psva,
        int* pcGlyphs);
    static LPFN_ScriptShape fnScriptShape = (LPFN_ScriptShape)GetProcAddress(GetModuleHandle(_T("Usp10.dll")), "ScriptShape");
    return fnScriptShape(hdc, psc, pwcChars, cChars, cMaxGlyphs, psa, pwOutGlyphs, pwLogClust, psva, pcGlyphs);
}

BOOL WINAPI GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize)
{
    typedef BOOL(WINAPI *LPFN_GetTextExtentPointI)(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
    static LPFN_GetTextExtentPointI fnGetTextExtentPointI = (LPFN_GetTextExtentPointI)GetProcAddress(GetModuleHandle(_T("Gdi32.dll")), "GetTextExtentPointI");
    return fnGetTextExtentPointI(hdc, pgiIn, cgi, psize);
}

HANDLE WINAPI AddFontMemResourceEx(PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD* pNumFonts)
{
    typedef HANDLE(WINAPI *LPFN_AddFontMemResourceEx)(PVOID pFileView, DWORD cjSize, PVOID pvResrved, DWORD* pNumFonts);
    static LPFN_AddFontMemResourceEx fnAddFontMemResourceEx = (LPFN_AddFontMemResourceEx)GetProcAddress(GetModuleHandle(_T("Gdi32.dll")), "AddFontMemResourceEx");
    return fnAddFontMemResourceEx(pFileView, cjSize, pvResrved, pNumFonts);
}