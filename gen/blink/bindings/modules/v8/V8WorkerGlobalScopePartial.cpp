// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8WorkerGlobalScopePartial.h"

#include "bindings/core/v8/Dictionary.h"
#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptPromise.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/V8DOMConfiguration.h"
#include "bindings/core/v8/V8FileError.h"
#include "bindings/core/v8/V8HiddenValue.h"
#include "bindings/core/v8/V8ObjectConstructor.h"
#include "bindings/core/v8/V8WorkerGlobalScope.h"
#include "bindings/modules/v8/V8CacheStorage.h"
#include "bindings/modules/v8/V8Crypto.h"
#include "bindings/modules/v8/V8DOMFileSystemSync.h"
#include "bindings/modules/v8/V8EntryCallback.h"
#include "bindings/modules/v8/V8EntrySync.h"
#include "bindings/modules/v8/V8ErrorCallback.h"
#include "bindings/modules/v8/V8FileSystemCallback.h"
#include "bindings/modules/v8/V8IDBCursor.h"
#include "bindings/modules/v8/V8IDBDatabase.h"
#include "bindings/modules/v8/V8IDBFactory.h"
#include "bindings/modules/v8/V8IDBIndex.h"
#include "bindings/modules/v8/V8IDBKeyRange.h"
#include "bindings/modules/v8/V8IDBObjectStore.h"
#include "bindings/modules/v8/V8IDBRequest.h"
#include "bindings/modules/v8/V8IDBTransaction.h"
#include "bindings/modules/v8/V8Request.h"
#include "core/dom/ContextFeatures.h"
#include "core/dom/Document.h"
#include "core/frame/UseCounter.h"
#include "modules/cachestorage/GlobalCacheStorage.h"
#include "modules/crypto/WorkerGlobalScopeCrypto.h"
#include "modules/fetch/GlobalFetch.h"
#include "modules/filesystem/WorkerGlobalScopeFileSystem.h"
#include "modules/indexeddb/WorkerGlobalScopeIndexedDatabase.h"
#include "platform/RuntimeEnabledFeatures.h"
#include "platform/TraceEvent.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

namespace WorkerGlobalScopePartialV8Internal {

template<class CallbackInfo>
static bool WorkerGlobalScopeCreateDataProperty(v8::Local<v8::Name> name, v8::Local<v8::Value> v8Value, const CallbackInfo& info)
{
    ASSERT(info.This()->IsObject());
    return v8CallBoolean(v8::Local<v8::Object>::Cast(info.This())->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), name, v8Value));
}

static void WorkerGlobalScopeConstructorAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    do {
        v8::Local<v8::Value> data = info.Data();
        ASSERT(data->IsExternal());
        V8PerContextData* perContextData = V8PerContextData::from(info.Holder()->CreationContext());
        if (!perContextData)
            break;
        const WrapperTypeInfo* wrapperTypeInfo = WrapperTypeInfo::unwrap(data);
        if (!wrapperTypeInfo)
            break;
        WorkerGlobalScopeCreateDataProperty(v8String(info.GetIsolate(), wrapperTypeInfo->interfaceName), v8Value, info);
    } while (false); // do ... while (false) just for use of break
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

#ifdef MINIBLINK_NOT_IMPLEMENTED
static void cachesAttributeGetter(const v8::PropertyCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    ExceptionState exceptionState(ExceptionState::GetterContext, "caches", "WorkerGlobalScope", holder, info.GetIsolate());
    RawPtr<CacheStorage> cppValue(GlobalCacheStorage::caches(*impl, exceptionState));
    if (UNLIKELY(exceptionState.throwIfNeeded()))
        return;
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "caches"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void cachesAttributeGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::GlobalCacheStorage);
    WorkerGlobalScopePartialV8Internal::cachesAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void cryptoAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<Crypto> cppValue(WorkerGlobalScopeCrypto::crypto(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "crypto"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void cryptoAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopePartialV8Internal::cryptoAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIndexedDBAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<IDBFactory> cppValue(WorkerGlobalScopeIndexedDatabase::indexedDB(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "webkitIndexedDB"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void webkitIndexedDBAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIndexedDB);
    WorkerGlobalScopePartialV8Internal::webkitIndexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBCursorAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBCursor");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBCursorAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBCursorConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBCursorAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBDatabaseAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBDatabase");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBDatabaseAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBDatabaseConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBDatabaseAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBFactoryAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBFactory");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBFactoryAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBFactoryConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBFactoryAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBIndexAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBIndex");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBIndexAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBIndexConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBIndexAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBKeyRangeAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBKeyRange");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBKeyRangeAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBKeyRangeConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBKeyRangeAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBObjectStoreAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBObjectStore");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBObjectStoreAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBObjectStoreConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBObjectStoreAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBRequestAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBRequest");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBRequestAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBRequestConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBRequestAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBTransactionAttributeSetter(v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    v8::Local<v8::String> propertyName = v8AtomicString(info.GetIsolate(), "webkitIDBTransaction");
    WorkerGlobalScopeCreateDataProperty(propertyName, v8Value, info);
}

static void webkitIDBTransactionAttributeSetterCallback(v8::Local<v8::Name>, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<void>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMSetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBTransactionConstructor);
    WorkerGlobalScopePartialV8Internal::webkitIDBTransactionAttributeSetter(v8Value, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void indexedDBAttributeGetter(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    v8::Local<v8::Object> holder = info.Holder();
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(holder);
    RawPtr<IDBFactory> cppValue(WorkerGlobalScopeIndexedDatabase::indexedDB(*impl));
    if (cppValue && DOMDataStore::setReturnValue(info.GetReturnValue(), cppValue.get()))
        return;
    v8::Local<v8::Value> v8Value(toV8(cppValue.get(), holder, info.GetIsolate()));
    if (!v8Value.IsEmpty()) {
        V8HiddenValue::setHiddenValue(info.GetIsolate(), holder, v8AtomicString(info.GetIsolate(), "indexedDB"), v8Value);
        v8SetReturnValue(info, v8Value);
    }
}

static void indexedDBAttributeGetterCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    WorkerGlobalScopePartialV8Internal::indexedDBAttributeGetter(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBCursorConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBCursorConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBDatabaseConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBDatabaseConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBFactoryConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBFactoryConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBIndexConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBIndexConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBKeyRangeConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBKeyRangeConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBObjectStoreConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBObjectStoreConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBRequestConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBRequestConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitIDBTransactionConstructorGetterCallback(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMGetter");
    UseCounter::countDeprecationIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::PrefixedIDBTransactionConstructor);
    v8ConstructorAttributeGetter(property, info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}
#endif

static void fetchMethodPromise(const v8::FunctionCallbackInfo<v8::Value>& info, ExceptionState& exceptionState)
{
#ifdef MINIBLINK_NOT_IMPLEMENTED
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    RequestOrUSVString input;
    Dictionary init;
    {
        V8RequestOrUSVString::toImpl(info.GetIsolate(), info[0], input, exceptionState);
        if (exceptionState.hadException())
            return;
        if (!isUndefinedOrNull(info[1]) && !info[1]->IsObject()) {
            exceptionState.throwTypeError("parameter 2 ('init') is not an object.");
            return;
        }
        init = Dictionary(info[1], info.GetIsolate(), exceptionState);
        if (exceptionState.hadException())
            return;
    }
    ScriptState* scriptState = ScriptState::current(info.GetIsolate());
    ScriptPromise result = GlobalFetch::fetch(scriptState, *impl, input, init, exceptionState);
    if (exceptionState.hadException()) {
        return;
    }
    v8SetReturnValue(info, result.v8Value());
#endif
    DebugBreak();
}

static void fetchMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "fetch", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    fetchMethodPromise(info, exceptionState);
    if (exceptionState.hadException())
        v8SetReturnValue(info, exceptionState.reject(ScriptState::current(info.GetIsolate())).v8Value());
}

static void fetchMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopePartialV8Internal::fetchMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitRequestFileSystemMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
#ifdef MINIBLINK_NOT_IMPLEMENTED
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestFileSystem", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    unsigned type;
    long long size;
    FileSystemCallback* successCallback;
    ErrorCallback* errorCallback;
    {
        type = toUInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        size = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        if (!isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 3 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            successCallback = V8FileSystemCallback::create(v8::Local<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        } else {
            successCallback = nullptr;
        }
        if (!isUndefinedOrNull(info[3])) {
            if (!info[3]->IsFunction()) {
                exceptionState.throwTypeError("The callback provided as parameter 4 is not a function.");
                exceptionState.throwIfNeeded();
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Local<v8::Function>::Cast(info[3]), ScriptState::current(info.GetIsolate()));
        } else {
            errorCallback = nullptr;
        }
    }
    WorkerGlobalScopeFileSystem::webkitRequestFileSystem(*impl, type, size, successCallback, errorCallback);
#endif
    DebugBreak();
}

static void webkitRequestFileSystemMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::RequestFileSystemWorker);
    WorkerGlobalScopePartialV8Internal::webkitRequestFileSystemMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitRequestFileSystemSyncMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
#ifdef MINIBLINK_NOT_IMPLEMENTED
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitRequestFileSystemSync", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 2)) {
        setMinimumArityTypeError(exceptionState, 2, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    unsigned type;
    long long size;
    {
        type = toUInt16(info.GetIsolate(), info[0], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
        size = toInt64(info.GetIsolate(), info[1], NormalConversion, exceptionState);
        if (exceptionState.throwIfNeeded())
            return;
    }
    RawPtr<DOMFileSystemSync> result = WorkerGlobalScopeFileSystem::webkitRequestFileSystemSync(*impl, type, size, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
#endif
    DebugBreak();
}

static void webkitRequestFileSystemSyncMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    UseCounter::countIfNotPrivateScript(info.GetIsolate(), callingExecutionContext(info.GetIsolate()), UseCounter::RequestFileSystemSyncWorker);
    WorkerGlobalScopePartialV8Internal::webkitRequestFileSystemSyncMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitResolveLocalFileSystemURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    if (UNLIKELY(info.Length() < 2)) {
        V8ThrowException::throwException(createMinimumArityTypeErrorForMethod(info.GetIsolate(), "webkitResolveLocalFileSystemURL", "WorkerGlobalScope", 2, info.Length()), info.GetIsolate());
        return;
    }
#ifdef MINIBLINK_NOT_IMPLEMENTED
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> url;
    EntryCallback* successCallback;
    ErrorCallback* errorCallback;
    {
        url = info[0];
        if (!url.prepare())
            return;
        if (info.Length() <= 1 || !info[1]->IsFunction()) {
            V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("webkitResolveLocalFileSystemURL", "WorkerGlobalScope", "The callback provided as parameter 2 is not a function."));
            return;
        }
        successCallback = V8EntryCallback::create(v8::Local<v8::Function>::Cast(info[1]), ScriptState::current(info.GetIsolate()));
        if (!isUndefinedOrNull(info[2])) {
            if (!info[2]->IsFunction()) {
                V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("webkitResolveLocalFileSystemURL", "WorkerGlobalScope", "The callback provided as parameter 3 is not a function."));
                return;
            }
            errorCallback = V8ErrorCallback::create(v8::Local<v8::Function>::Cast(info[2]), ScriptState::current(info.GetIsolate()));
        } else {
            errorCallback = nullptr;
        }
    }
    WorkerGlobalScopeFileSystem::webkitResolveLocalFileSystemURL(*impl, url, successCallback, errorCallback);
#endif
    DebugBreak();
}

static void webkitResolveLocalFileSystemURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopePartialV8Internal::webkitResolveLocalFileSystemURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

static void webkitResolveLocalFileSystemSyncURLMethod(const v8::FunctionCallbackInfo<v8::Value>& info)
{
#ifdef MINIBLINK_NOT_IMPLEMENTED
    ExceptionState exceptionState(ExceptionState::ExecutionContext, "webkitResolveLocalFileSystemSyncURL", "WorkerGlobalScope", info.Holder(), info.GetIsolate());
    if (UNLIKELY(info.Length() < 1)) {
        setMinimumArityTypeError(exceptionState, 1, info.Length());
        exceptionState.throwIfNeeded();
        return;
    }
    WorkerGlobalScope* impl = V8WorkerGlobalScope::toImpl(info.Holder());
    V8StringResource<> url;
    {
        url = info[0];
        if (!url.prepare())
            return;
    }
    RawPtr<EntrySync> result = WorkerGlobalScopeFileSystem::webkitResolveLocalFileSystemSyncURL(*impl, url, exceptionState);
    if (exceptionState.hadException()) {
        exceptionState.throwIfNeeded();
        return;
    }
    v8SetReturnValue(info, result.release());
#endif
    DebugBreak();
}

static void webkitResolveLocalFileSystemSyncURLMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info)
{
    TRACE_EVENT_SET_SAMPLING_STATE("blink", "DOMMethod");
    WorkerGlobalScopePartialV8Internal::webkitResolveLocalFileSystemSyncURLMethod(info);
    TRACE_EVENT_SET_SAMPLING_STATE("v8", "V8Execution");
}

} // namespace WorkerGlobalScopePartialV8Internal

// Suppress warning: global constructors, because AttributeConfiguration is trivial
// and does not depend on another global objects.
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
#ifdef MINIBLINK_NOT_IMPLEMENTED
static const V8DOMConfiguration::AttributeConfiguration V8WorkerGlobalScopeAttributes[] = {
    {"webkitIDBCursor", WorkerGlobalScopePartialV8Internal::webkitIDBCursorConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBCursorAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBCursor::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBDatabase", WorkerGlobalScopePartialV8Internal::webkitIDBDatabaseConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBDatabaseAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBDatabase::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBFactory", WorkerGlobalScopePartialV8Internal::webkitIDBFactoryConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBFactoryAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBFactory::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBIndex", WorkerGlobalScopePartialV8Internal::webkitIDBIndexConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBIndexAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBIndex::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBKeyRange", WorkerGlobalScopePartialV8Internal::webkitIDBKeyRangeConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBKeyRangeAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBKeyRange::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBObjectStore", WorkerGlobalScopePartialV8Internal::webkitIDBObjectStoreConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBObjectStoreAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBObjectStore::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBRequest", WorkerGlobalScopePartialV8Internal::webkitIDBRequestConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBRequestAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBRequest::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
    {"webkitIDBTransaction", WorkerGlobalScopePartialV8Internal::webkitIDBTransactionConstructorGetterCallback, WorkerGlobalScopePartialV8Internal::webkitIDBTransactionAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8IDBTransaction::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder},
};
#endif
#if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
#pragma clang diagnostic pop
#endif

#ifdef MINIBLINK_NOT_IMPLEMENTED
static const V8DOMConfiguration::AccessorConfiguration V8WorkerGlobalScopeAccessors[] = {
    {"crypto", WorkerGlobalScopePartialV8Internal::cryptoAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"webkitIndexedDB", WorkerGlobalScopePartialV8Internal::webkitIndexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
    {"indexedDB", WorkerGlobalScopePartialV8Internal::indexedDBAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::None), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder},
};
#endif

static const V8DOMConfiguration::MethodConfiguration V8WorkerGlobalScopeMethods[] = {
    {"fetch", WorkerGlobalScopePartialV8Internal::fetchMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts},
};

void V8WorkerGlobalScopePartial::installV8WorkerGlobalScopeTemplate(v8::Local<v8::FunctionTemplate> functionTemplate, v8::Isolate* isolate)
{
    V8WorkerGlobalScope::installV8WorkerGlobalScopeTemplate(functionTemplate, isolate);

    v8::Local<v8::Signature> defaultSignature;
#ifdef MINIBLINK_NOT_IMPLEMENTED
    if (!RuntimeEnabledFeatures::globalCacheStorageEnabled())
#endif
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "WorkerGlobalScope", v8::Local<v8::FunctionTemplate>(), V8WorkerGlobalScope::internalFieldCount, 0, 0, 0, 0, 0, 0);
#ifdef MINIBLINK_NOT_IMPLEMENTED
    else
        defaultSignature = V8DOMConfiguration::installDOMClassTemplate(isolate, functionTemplate, "WorkerGlobalScope", v8::Local<v8::FunctionTemplate>(), V8WorkerGlobalScope::internalFieldCount,
            V8WorkerGlobalScopeAttributes, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeAttributes),
            V8WorkerGlobalScopeAccessors, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeAccessors),
            V8WorkerGlobalScopeMethods, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeMethods));
#endif

    v8::Local<v8::ObjectTemplate> instanceTemplate = functionTemplate->InstanceTemplate();
    ALLOW_UNUSED_LOCAL(instanceTemplate);
    v8::Local<v8::ObjectTemplate> prototypeTemplate = functionTemplate->PrototypeTemplate();
    ALLOW_UNUSED_LOCAL(prototypeTemplate);
#ifdef MINIBLINK_NOT_IMPLEMENTED
    if (RuntimeEnabledFeatures::globalCacheStorageEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"caches", WorkerGlobalScopePartialV8Internal::cachesAttributeGetterCallback, 0, 0, 0, 0, static_cast<v8::AccessControl>(v8::PROHIBITS_OVERWRITING), static_cast<v8::PropertyAttribute>(v8::DontDelete), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAttribute(isolate, instanceTemplate, prototypeTemplate, attributeConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        static const V8DOMConfiguration::AttributeConfiguration attributeConfiguration =\
        {"FileError", v8ConstructorAttributeGetter, WorkerGlobalScopePartialV8Internal::WorkerGlobalScopeConstructorAttributeSetterCallback, 0, 0, const_cast<WrapperTypeInfo*>(&V8FileError::wrapperTypeInfo), static_cast<v8::AccessControl>(v8::DEFAULT), static_cast<v8::PropertyAttribute>(v8::DontEnum), V8DOMConfiguration::ExposedToAllScripts, V8DOMConfiguration::OnInstance, V8DOMConfiguration::CheckHolder};
        V8DOMConfiguration::installAttribute(isolate, instanceTemplate, prototypeTemplate, attributeConfiguration);
    }
#endif
    static const V8DOMConfiguration::ConstantConfiguration V8WorkerGlobalScopeConstants[] = {
        {"TEMPORARY", 0, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
        {"PERSISTENT", 1, 0, 0, V8DOMConfiguration::ConstantTypeUnsignedShort},
    };
    V8DOMConfiguration::installConstants(isolate, functionTemplate, prototypeTemplate, V8WorkerGlobalScopeConstants, WTF_ARRAY_LENGTH(V8WorkerGlobalScopeConstants));
    static_assert(0 == WorkerGlobalScopeFileSystem::TEMPORARY, "the value of WorkerGlobalScope_TEMPORARY does not match with implementation");
    static_assert(1 == WorkerGlobalScopeFileSystem::PERSISTENT, "the value of WorkerGlobalScope_PERSISTENT does not match with implementation");
#ifdef MINIBLINK_NOT_IMPLEMENTED
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitRequestFileSystemMethodConfiguration = {
            "webkitRequestFileSystem", WorkerGlobalScopePartialV8Internal::webkitRequestFileSystemMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, webkitRequestFileSystemMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitRequestFileSystemSyncMethodConfiguration = {
            "webkitRequestFileSystemSync", WorkerGlobalScopePartialV8Internal::webkitRequestFileSystemSyncMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, webkitRequestFileSystemSyncMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitResolveLocalFileSystemURLMethodConfiguration = {
            "webkitResolveLocalFileSystemURL", WorkerGlobalScopePartialV8Internal::webkitResolveLocalFileSystemURLMethodCallback, 0, 2, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, webkitResolveLocalFileSystemURLMethodConfiguration);
    }
    if (RuntimeEnabledFeatures::fileSystemEnabled()) {
        const V8DOMConfiguration::MethodConfiguration webkitResolveLocalFileSystemSyncURLMethodConfiguration = {
            "webkitResolveLocalFileSystemSyncURL", WorkerGlobalScopePartialV8Internal::webkitResolveLocalFileSystemSyncURLMethodCallback, 0, 1, V8DOMConfiguration::ExposedToAllScripts,
        };
        V8DOMConfiguration::installMethod(isolate, prototypeTemplate, defaultSignature, v8::None, webkitResolveLocalFileSystemSyncURLMethodConfiguration);
    }
#endif
}

void V8WorkerGlobalScopePartial::preparePrototypeObject(v8::Isolate* isolate, v8::Local<v8::Object> prototypeObject, v8::Local<v8::FunctionTemplate> interfaceTemplate)
{
    V8WorkerGlobalScope::preparePrototypeObject(isolate, prototypeObject, interfaceTemplate);
}

void V8WorkerGlobalScopePartial::initialize()
{
    // Should be invoked from initModules.
    V8WorkerGlobalScope::updateWrapperTypeInfo(
        &V8WorkerGlobalScopePartial::installV8WorkerGlobalScopeTemplate,
        &V8WorkerGlobalScopePartial::preparePrototypeObject);
}

} // namespace blink
